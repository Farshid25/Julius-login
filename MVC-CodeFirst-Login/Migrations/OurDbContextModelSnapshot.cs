// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MVC_CodeFirst_Login.Models;
using System;

namespace MVCCodeFirstLogin.Migrations
{
    [DbContext(typeof(OurDbContext))]
    partial class OurDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVC_CodeFirst_Login.Models.Consult", b =>
                {
                    b.Property<int>("ConsultId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginDate");

                    b.Property<int>("DiagnosisId");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.HasKey("ConsultId");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Consult");
                });

            modelBuilder.Entity("MVC_CodeFirst_Login.Models.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginDate");

                    b.Property<int>("DSId");

                    b.Property<int>("HypotheseId");

                    b.Property<string>("Name");

                    b.Property<int>("PatientId");

                    b.Property<int>("UserId");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("MVC_CodeFirst_Login.Models.GeneralPractioner", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfirmPassword");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("GeneralPractioner");
                });

            modelBuilder.Entity("MVC_CodeFirst_Login.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.HasKey("MedicationId");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("MVC_CodeFirst_Login.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfirmPassword");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("PatientId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("MVC_CodeFirst_Login.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MedicationId");

                    b.Property<int>("PatientId");

                    b.Property<int>("Quantity");

                    b.Property<int>("UserId");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("MVC_CodeFirst_Login.Models.Consult", b =>
                {
                    b.HasOne("MVC_CodeFirst_Login.Models.Diagnosis", "diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVC_CodeFirst_Login.Models.Diagnosis", b =>
                {
                    b.HasOne("MVC_CodeFirst_Login.Models.Patient", "patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVC_CodeFirst_Login.Models.GeneralPractioner", "generalPractioner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVC_CodeFirst_Login.Models.Prescription", b =>
                {
                    b.HasOne("MVC_CodeFirst_Login.Models.Medication", "medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVC_CodeFirst_Login.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVC_CodeFirst_Login.Models.GeneralPractioner", "generalPractioner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
